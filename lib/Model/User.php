<?php
/**
 * User
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OneLogin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0-alpha.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'username' => 'string',
        'email' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'title' => 'string',
        'department' => 'string',
        'company' => 'string',
        'comment' => 'string',
        'group_id' => 'int',
        'role_ids' => 'int[]',
        'phone' => 'string',
        'state' => 'int',
        'status' => 'int',
        'directory_id' => 'int',
        'trusted_idp_id' => 'int',
        'manager_ad_id' => 'string',
        'manager_user_id' => 'string',
        'samaccount_name' => 'string',
        'member_of' => 'string',
        'userprincipalname' => 'string',
        'distinguished_name' => 'string',
        'external_id' => 'string',
        'activated_at' => 'string',
        'last_login' => 'string',
        'invitation_sent_at' => 'string',
        'updated_at' => 'string',
        'preferred_locale_code' => 'string',
        'created_at' => 'string',
        'custom_attributes' => 'object',
        'invalid_login_attempts' => 'int',
        'locked_until' => 'string',
        'password_changed_at' => 'string',
        'password' => 'string',
        'password_confirmation' => 'string',
        'password_algorithm' => 'string',
        'salt' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'username' => null,
        'email' => null,
        'firstname' => null,
        'lastname' => null,
        'title' => null,
        'department' => null,
        'company' => null,
        'comment' => null,
        'group_id' => null,
        'role_ids' => null,
        'phone' => null,
        'state' => null,
        'status' => null,
        'directory_id' => null,
        'trusted_idp_id' => null,
        'manager_ad_id' => null,
        'manager_user_id' => null,
        'samaccount_name' => null,
        'member_of' => null,
        'userprincipalname' => null,
        'distinguished_name' => null,
        'external_id' => null,
        'activated_at' => null,
        'last_login' => null,
        'invitation_sent_at' => null,
        'updated_at' => null,
        'preferred_locale_code' => null,
        'created_at' => null,
        'custom_attributes' => null,
        'invalid_login_attempts' => null,
        'locked_until' => null,
        'password_changed_at' => null,
        'password' => null,
        'password_confirmation' => null,
        'password_algorithm' => null,
        'salt' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'username' => 'username',
        'email' => 'email',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'title' => 'title',
        'department' => 'department',
        'company' => 'company',
        'comment' => 'comment',
        'group_id' => 'group_id',
        'role_ids' => 'role_ids',
        'phone' => 'phone',
        'state' => 'state',
        'status' => 'status',
        'directory_id' => 'directory_id',
        'trusted_idp_id' => 'trusted_idp_id',
        'manager_ad_id' => 'manager_ad_id',
        'manager_user_id' => 'manager_user_id',
        'samaccount_name' => 'samaccount_name',
        'member_of' => 'member_of',
        'userprincipalname' => 'userprincipalname',
        'distinguished_name' => 'distinguished_name',
        'external_id' => 'external_id',
        'activated_at' => 'activated_at',
        'last_login' => 'last_login',
        'invitation_sent_at' => 'invitation_sent_at',
        'updated_at' => 'updated_at',
        'preferred_locale_code' => 'preferred_locale_code',
        'created_at' => 'created_at',
        'custom_attributes' => 'custom_attributes',
        'invalid_login_attempts' => 'invalid_login_attempts',
        'locked_until' => 'locked_until',
        'password_changed_at' => 'password_changed_at',
        'password' => 'password',
        'password_confirmation' => 'password_confirmation',
        'password_algorithm' => 'password_algorithm',
        'salt' => 'salt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'username' => 'setUsername',
        'email' => 'setEmail',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'title' => 'setTitle',
        'department' => 'setDepartment',
        'company' => 'setCompany',
        'comment' => 'setComment',
        'group_id' => 'setGroupId',
        'role_ids' => 'setRoleIds',
        'phone' => 'setPhone',
        'state' => 'setState',
        'status' => 'setStatus',
        'directory_id' => 'setDirectoryId',
        'trusted_idp_id' => 'setTrustedIdpId',
        'manager_ad_id' => 'setManagerAdId',
        'manager_user_id' => 'setManagerUserId',
        'samaccount_name' => 'setSamaccountName',
        'member_of' => 'setMemberOf',
        'userprincipalname' => 'setUserprincipalname',
        'distinguished_name' => 'setDistinguishedName',
        'external_id' => 'setExternalId',
        'activated_at' => 'setActivatedAt',
        'last_login' => 'setLastLogin',
        'invitation_sent_at' => 'setInvitationSentAt',
        'updated_at' => 'setUpdatedAt',
        'preferred_locale_code' => 'setPreferredLocaleCode',
        'created_at' => 'setCreatedAt',
        'custom_attributes' => 'setCustomAttributes',
        'invalid_login_attempts' => 'setInvalidLoginAttempts',
        'locked_until' => 'setLockedUntil',
        'password_changed_at' => 'setPasswordChangedAt',
        'password' => 'setPassword',
        'password_confirmation' => 'setPasswordConfirmation',
        'password_algorithm' => 'setPasswordAlgorithm',
        'salt' => 'setSalt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'username' => 'getUsername',
        'email' => 'getEmail',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'title' => 'getTitle',
        'department' => 'getDepartment',
        'company' => 'getCompany',
        'comment' => 'getComment',
        'group_id' => 'getGroupId',
        'role_ids' => 'getRoleIds',
        'phone' => 'getPhone',
        'state' => 'getState',
        'status' => 'getStatus',
        'directory_id' => 'getDirectoryId',
        'trusted_idp_id' => 'getTrustedIdpId',
        'manager_ad_id' => 'getManagerAdId',
        'manager_user_id' => 'getManagerUserId',
        'samaccount_name' => 'getSamaccountName',
        'member_of' => 'getMemberOf',
        'userprincipalname' => 'getUserprincipalname',
        'distinguished_name' => 'getDistinguishedName',
        'external_id' => 'getExternalId',
        'activated_at' => 'getActivatedAt',
        'last_login' => 'getLastLogin',
        'invitation_sent_at' => 'getInvitationSentAt',
        'updated_at' => 'getUpdatedAt',
        'preferred_locale_code' => 'getPreferredLocaleCode',
        'created_at' => 'getCreatedAt',
        'custom_attributes' => 'getCustomAttributes',
        'invalid_login_attempts' => 'getInvalidLoginAttempts',
        'locked_until' => 'getLockedUntil',
        'password_changed_at' => 'getPasswordChangedAt',
        'password' => 'getPassword',
        'password_confirmation' => 'getPasswordConfirmation',
        'password_algorithm' => 'getPasswordAlgorithm',
        'salt' => 'getSalt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_0 = 0;
    public const STATE_1 = 1;
    public const STATE_2 = 2;
    public const STATE_3 = 3;
    public const STATUS_0 = 0;
    public const STATUS_1 = 1;
    public const STATUS_2 = 2;
    public const STATUS_3 = 3;
    public const STATUS_4 = 4;
    public const STATUS_5 = 5;
    public const STATUS_7 = 7;
    public const STATUS_8 = 8;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_0,
            self::STATE_1,
            self::STATE_2,
            self::STATE_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_0,
            self::STATUS_1,
            self::STATUS_2,
            self::STATUS_3,
            self::STATUS_4,
            self::STATUS_5,
            self::STATUS_7,
            self::STATUS_8,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['firstname'] = $data['firstname'] ?? null;
        $this->container['lastname'] = $data['lastname'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['department'] = $data['department'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['group_id'] = $data['group_id'] ?? null;
        $this->container['role_ids'] = $data['role_ids'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['directory_id'] = $data['directory_id'] ?? null;
        $this->container['trusted_idp_id'] = $data['trusted_idp_id'] ?? null;
        $this->container['manager_ad_id'] = $data['manager_ad_id'] ?? null;
        $this->container['manager_user_id'] = $data['manager_user_id'] ?? null;
        $this->container['samaccount_name'] = $data['samaccount_name'] ?? null;
        $this->container['member_of'] = $data['member_of'] ?? null;
        $this->container['userprincipalname'] = $data['userprincipalname'] ?? null;
        $this->container['distinguished_name'] = $data['distinguished_name'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['activated_at'] = $data['activated_at'] ?? null;
        $this->container['last_login'] = $data['last_login'] ?? null;
        $this->container['invitation_sent_at'] = $data['invitation_sent_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['preferred_locale_code'] = $data['preferred_locale_code'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['custom_attributes'] = $data['custom_attributes'] ?? null;
        $this->container['invalid_login_attempts'] = $data['invalid_login_attempts'] ?? null;
        $this->container['locked_until'] = $data['locked_until'] ?? null;
        $this->container['password_changed_at'] = $data['password_changed_at'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['password_confirmation'] = $data['password_confirmation'] ?? null;
        $this->container['password_algorithm'] = $data['password_algorithm'] ?? null;
        $this->container['salt'] = $data['salt'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username A username for the user.
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email A valid email for the user.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname The user's first name.
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string|null
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string|null $lastname The user's last name.
     *
     * @return self
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The user's job title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department The user's department.
     *
     * @return self
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company The user's company.
     *
     * @return self
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Free text related to the user.
     *
     * @return self
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int|null
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int|null $group_id The ID of the Group in OneLogin that the user is assigned to.
     *
     * @return self
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets role_ids
     *
     * @return int[]|null
     */
    public function getRoleIds()
    {
        return $this->container['role_ids'];
    }

    /**
     * Sets role_ids
     *
     * @param int[]|null $role_ids A list of OneLogin Role IDs of the user
     *
     * @return self
     */
    public function setRoleIds($role_ids)
    {
        $this->container['role_ids'] = $role_ids;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The E.164 format phone number for a user.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets directory_id
     *
     * @return int|null
     */
    public function getDirectoryId()
    {
        return $this->container['directory_id'];
    }

    /**
     * Sets directory_id
     *
     * @param int|null $directory_id The ID of the OneLogin Directory of the user.
     *
     * @return self
     */
    public function setDirectoryId($directory_id)
    {
        $this->container['directory_id'] = $directory_id;

        return $this;
    }

    /**
     * Gets trusted_idp_id
     *
     * @return int|null
     */
    public function getTrustedIdpId()
    {
        return $this->container['trusted_idp_id'];
    }

    /**
     * Sets trusted_idp_id
     *
     * @param int|null $trusted_idp_id The ID of the OneLogin Trusted IDP of the user.
     *
     * @return self
     */
    public function setTrustedIdpId($trusted_idp_id)
    {
        $this->container['trusted_idp_id'] = $trusted_idp_id;

        return $this;
    }

    /**
     * Gets manager_ad_id
     *
     * @return string|null
     */
    public function getManagerAdId()
    {
        return $this->container['manager_ad_id'];
    }

    /**
     * Sets manager_ad_id
     *
     * @param string|null $manager_ad_id The ID of the user's manager in Active Directory.
     *
     * @return self
     */
    public function setManagerAdId($manager_ad_id)
    {
        $this->container['manager_ad_id'] = $manager_ad_id;

        return $this;
    }

    /**
     * Gets manager_user_id
     *
     * @return string|null
     */
    public function getManagerUserId()
    {
        return $this->container['manager_user_id'];
    }

    /**
     * Sets manager_user_id
     *
     * @param string|null $manager_user_id The OneLogin User ID for the user's manager.
     *
     * @return self
     */
    public function setManagerUserId($manager_user_id)
    {
        $this->container['manager_user_id'] = $manager_user_id;

        return $this;
    }

    /**
     * Gets samaccount_name
     *
     * @return string|null
     */
    public function getSamaccountName()
    {
        return $this->container['samaccount_name'];
    }

    /**
     * Sets samaccount_name
     *
     * @param string|null $samaccount_name The user's Active Directory username.
     *
     * @return self
     */
    public function setSamaccountName($samaccount_name)
    {
        $this->container['samaccount_name'] = $samaccount_name;

        return $this;
    }

    /**
     * Gets member_of
     *
     * @return string|null
     */
    public function getMemberOf()
    {
        return $this->container['member_of'];
    }

    /**
     * Sets member_of
     *
     * @param string|null $member_of The user's directory membership.
     *
     * @return self
     */
    public function setMemberOf($member_of)
    {
        $this->container['member_of'] = $member_of;

        return $this;
    }

    /**
     * Gets userprincipalname
     *
     * @return string|null
     */
    public function getUserprincipalname()
    {
        return $this->container['userprincipalname'];
    }

    /**
     * Sets userprincipalname
     *
     * @param string|null $userprincipalname The principle name of the user.
     *
     * @return self
     */
    public function setUserprincipalname($userprincipalname)
    {
        $this->container['userprincipalname'] = $userprincipalname;

        return $this;
    }

    /**
     * Gets distinguished_name
     *
     * @return string|null
     */
    public function getDistinguishedName()
    {
        return $this->container['distinguished_name'];
    }

    /**
     * Sets distinguished_name
     *
     * @param string|null $distinguished_name The distinguished name of the user.
     *
     * @return self
     */
    public function setDistinguishedName($distinguished_name)
    {
        $this->container['distinguished_name'] = $distinguished_name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The ID of the user in an external directory.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets activated_at
     *
     * @return string|null
     */
    public function getActivatedAt()
    {
        return $this->container['activated_at'];
    }

    /**
     * Sets activated_at
     *
     * @param string|null $activated_at activated_at
     *
     * @return self
     */
    public function setActivatedAt($activated_at)
    {
        $this->container['activated_at'] = $activated_at;

        return $this;
    }

    /**
     * Gets last_login
     *
     * @return string|null
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     *
     * @param string|null $last_login last_login
     *
     * @return self
     */
    public function setLastLogin($last_login)
    {
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets invitation_sent_at
     *
     * @return string|null
     */
    public function getInvitationSentAt()
    {
        return $this->container['invitation_sent_at'];
    }

    /**
     * Sets invitation_sent_at
     *
     * @param string|null $invitation_sent_at invitation_sent_at
     *
     * @return self
     */
    public function setInvitationSentAt($invitation_sent_at)
    {
        $this->container['invitation_sent_at'] = $invitation_sent_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets preferred_locale_code
     *
     * @return string|null
     */
    public function getPreferredLocaleCode()
    {
        return $this->container['preferred_locale_code'];
    }

    /**
     * Sets preferred_locale_code
     *
     * @param string|null $preferred_locale_code preferred_locale_code
     *
     * @return self
     */
    public function setPreferredLocaleCode($preferred_locale_code)
    {
        $this->container['preferred_locale_code'] = $preferred_locale_code;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return object|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param object|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets invalid_login_attempts
     *
     * @return int|null
     */
    public function getInvalidLoginAttempts()
    {
        return $this->container['invalid_login_attempts'];
    }

    /**
     * Sets invalid_login_attempts
     *
     * @param int|null $invalid_login_attempts invalid_login_attempts
     *
     * @return self
     */
    public function setInvalidLoginAttempts($invalid_login_attempts)
    {
        $this->container['invalid_login_attempts'] = $invalid_login_attempts;

        return $this;
    }

    /**
     * Gets locked_until
     *
     * @return string|null
     */
    public function getLockedUntil()
    {
        return $this->container['locked_until'];
    }

    /**
     * Sets locked_until
     *
     * @param string|null $locked_until locked_until
     *
     * @return self
     */
    public function setLockedUntil($locked_until)
    {
        $this->container['locked_until'] = $locked_until;

        return $this;
    }

    /**
     * Gets password_changed_at
     *
     * @return string|null
     */
    public function getPasswordChangedAt()
    {
        return $this->container['password_changed_at'];
    }

    /**
     * Sets password_changed_at
     *
     * @param string|null $password_changed_at password_changed_at
     *
     * @return self
     */
    public function setPasswordChangedAt($password_changed_at)
    {
        $this->container['password_changed_at'] = $password_changed_at;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password The password to set for a user.
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets password_confirmation
     *
     * @return string|null
     */
    public function getPasswordConfirmation()
    {
        return $this->container['password_confirmation'];
    }

    /**
     * Sets password_confirmation
     *
     * @param string|null $password_confirmation Required if the password is being set.
     *
     * @return self
     */
    public function setPasswordConfirmation($password_confirmation)
    {
        $this->container['password_confirmation'] = $password_confirmation;

        return $this;
    }

    /**
     * Gets password_algorithm
     *
     * @return string|null
     */
    public function getPasswordAlgorithm()
    {
        return $this->container['password_algorithm'];
    }

    /**
     * Sets password_algorithm
     *
     * @param string|null $password_algorithm Use this when importing a password that's already hashed. Prepend the salt value to the cleartext password value before SHA-256-encoding it
     *
     * @return self
     */
    public function setPasswordAlgorithm($password_algorithm)
    {
        $this->container['password_algorithm'] = $password_algorithm;

        return $this;
    }

    /**
     * Gets salt
     *
     * @return string|null
     */
    public function getSalt()
    {
        return $this->container['salt'];
    }

    /**
     * Sets salt
     *
     * @param string|null $salt The salt value used with the password_algorithm.
     *
     * @return self
     */
    public function setSalt($salt)
    {
        $this->container['salt'] = $salt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



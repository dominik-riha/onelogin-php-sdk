<?php
/**
 * GetUserApps200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OneLogin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0-alpha.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetUserApps200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetUserApps200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getUserApps_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'icon_url' => 'string',
        'extension' => 'bool',
        'login_id' => 'int',
        'name' => 'string',
        'provisioning_status' => 'string',
        'provisioning_state' => 'string',
        'provisioning_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'icon_url' => null,
        'extension' => null,
        'login_id' => null,
        'name' => null,
        'provisioning_status' => null,
        'provisioning_state' => null,
        'provisioning_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'icon_url' => 'icon_url',
        'extension' => 'extension',
        'login_id' => 'login_id',
        'name' => 'name',
        'provisioning_status' => 'provisioning_status',
        'provisioning_state' => 'provisioning_state',
        'provisioning_enabled' => 'provisioning_enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'icon_url' => 'setIconUrl',
        'extension' => 'setExtension',
        'login_id' => 'setLoginId',
        'name' => 'setName',
        'provisioning_status' => 'setProvisioningStatus',
        'provisioning_state' => 'setProvisioningState',
        'provisioning_enabled' => 'setProvisioningEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'icon_url' => 'getIconUrl',
        'extension' => 'getExtension',
        'login_id' => 'getLoginId',
        'name' => 'getName',
        'provisioning_status' => 'getProvisioningStatus',
        'provisioning_state' => 'getProvisioningState',
        'provisioning_enabled' => 'getProvisioningEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROVISIONING_STATUS_ENABLING = 'enabling';
    public const PROVISIONING_STATUS_DISABLING = 'disabling';
    public const PROVISIONING_STATUS_ENABLING_PENDING_APPROVAL = 'enabling_pending_approval';
    public const PROVISIONING_STATUS_DISABLING_PENDDING_APPROVAL = 'disabling_pendding_approval';
    public const PROVISIONING_STATUS_ENABLED = 'enabled';
    public const PROVISIONING_STATUS_DISABLED = 'disabled';
    public const PROVISIONING_STATUS_DISABLING_FAILED = 'disabling_failed';
    public const PROVISIONING_STATUS_ENABLING_FAILED = 'enabling_failed';
    public const PROVISIONING_STATE_UNKNOWN = 'unknown';
    public const PROVISIONING_STATE_PROVISIONING = 'provisioning';
    public const PROVISIONING_STATE_MODIFYING = 'modifying';
    public const PROVISIONING_STATE_DELETING = 'deleting';
    public const PROVISIONING_STATE_PROVISIONING_PENDING_APPROVAL = 'provisioning_pending_approval';
    public const PROVISIONING_STATE_DELETING_PENDING_APPROVAL = 'deleting_pending_approval';
    public const PROVISIONING_STATE_MODIFYING_PENDING_APPROVAL = 'modifying_pending_approval';
    public const PROVISIONING_STATE_LINKING = 'linking';
    public const PROVISIONING_STATE_PROVISIONED = 'provisioned';
    public const PROVISIONING_STATE_DELETED = 'deleted';
    public const PROVISIONING_STATE_MODIFYING_FAILED = 'modifying_failed';
    public const PROVISIONING_STATE_PROVISIONING_FAILED = 'provisioning_failed';
    public const PROVISIONING_STATE_DELETING_FAILED = 'deleting_failed';
    public const PROVISIONING_STATE_LINKING_FAILED = 'linking_failed';
    public const PROVISIONING_STATE_DISABLED = 'disabled';
    public const PROVISIONING_STATE_NONEXISTENT = 'nonexistent';
    public const PROVISIONING_STATE_MODIFYING_PENDING_APPROVAL_THEN_DISABLED = 'modifying_pending_approval_then_disabled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProvisioningStatusAllowableValues()
    {
        return [
            self::PROVISIONING_STATUS_ENABLING,
            self::PROVISIONING_STATUS_DISABLING,
            self::PROVISIONING_STATUS_ENABLING_PENDING_APPROVAL,
            self::PROVISIONING_STATUS_DISABLING_PENDDING_APPROVAL,
            self::PROVISIONING_STATUS_ENABLED,
            self::PROVISIONING_STATUS_DISABLED,
            self::PROVISIONING_STATUS_DISABLING_FAILED,
            self::PROVISIONING_STATUS_ENABLING_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProvisioningStateAllowableValues()
    {
        return [
            self::PROVISIONING_STATE_UNKNOWN,
            self::PROVISIONING_STATE_PROVISIONING,
            self::PROVISIONING_STATE_MODIFYING,
            self::PROVISIONING_STATE_DELETING,
            self::PROVISIONING_STATE_PROVISIONING_PENDING_APPROVAL,
            self::PROVISIONING_STATE_DELETING_PENDING_APPROVAL,
            self::PROVISIONING_STATE_MODIFYING_PENDING_APPROVAL,
            self::PROVISIONING_STATE_LINKING,
            self::PROVISIONING_STATE_PROVISIONED,
            self::PROVISIONING_STATE_DELETED,
            self::PROVISIONING_STATE_MODIFYING_FAILED,
            self::PROVISIONING_STATE_PROVISIONING_FAILED,
            self::PROVISIONING_STATE_DELETING_FAILED,
            self::PROVISIONING_STATE_LINKING_FAILED,
            self::PROVISIONING_STATE_DISABLED,
            self::PROVISIONING_STATE_NONEXISTENT,
            self::PROVISIONING_STATE_MODIFYING_PENDING_APPROVAL_THEN_DISABLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['icon_url'] = $data['icon_url'] ?? null;
        $this->container['extension'] = $data['extension'] ?? null;
        $this->container['login_id'] = $data['login_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['provisioning_status'] = $data['provisioning_status'] ?? null;
        $this->container['provisioning_state'] = $data['provisioning_state'] ?? null;
        $this->container['provisioning_enabled'] = $data['provisioning_enabled'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProvisioningStatusAllowableValues();
        if (!is_null($this->container['provisioning_status']) && !in_array($this->container['provisioning_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'provisioning_status', must be one of '%s'",
                $this->container['provisioning_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProvisioningStateAllowableValues();
        if (!is_null($this->container['provisioning_state']) && !in_array($this->container['provisioning_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'provisioning_state', must be one of '%s'",
                $this->container['provisioning_state'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The App ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string|null
     */
    public function getIconUrl()
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string|null $icon_url A url for the icon that represents the app in the OneLogin portal
     *
     * @return self
     */
    public function setIconUrl($icon_url)
    {
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return bool|null
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param bool|null $extension Boolean that indicates if the OneLogin browser extension is required to launch this app.
     *
     * @return self
     */
    public function setExtension($extension)
    {
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return int|null
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param int|null $login_id Unqiue identifier for this user and app combination.
     *
     * @return self
     */
    public function setLoginId($login_id)
    {
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the app.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets provisioning_status
     *
     * @return string|null
     */
    public function getProvisioningStatus()
    {
        return $this->container['provisioning_status'];
    }

    /**
     * Sets provisioning_status
     *
     * @param string|null $provisioning_status provisioning_status
     *
     * @return self
     */
    public function setProvisioningStatus($provisioning_status)
    {
        $allowedValues = $this->getProvisioningStatusAllowableValues();
        if (!is_null($provisioning_status) && !in_array($provisioning_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'provisioning_status', must be one of '%s'",
                    $provisioning_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provisioning_status'] = $provisioning_status;

        return $this;
    }

    /**
     * Gets provisioning_state
     *
     * @return string|null
     */
    public function getProvisioningState()
    {
        return $this->container['provisioning_state'];
    }

    /**
     * Sets provisioning_state
     *
     * @param string|null $provisioning_state If provisioning is enabled this indicates the state of provisioning for the given user.
     *
     * @return self
     */
    public function setProvisioningState($provisioning_state)
    {
        $allowedValues = $this->getProvisioningStateAllowableValues();
        if (!is_null($provisioning_state) && !in_array($provisioning_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'provisioning_state', must be one of '%s'",
                    $provisioning_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provisioning_state'] = $provisioning_state;

        return $this;
    }

    /**
     * Gets provisioning_enabled
     *
     * @return bool|null
     */
    public function getProvisioningEnabled()
    {
        return $this->container['provisioning_enabled'];
    }

    /**
     * Sets provisioning_enabled
     *
     * @param bool|null $provisioning_enabled Indicates if provisioning is enabled for this app.
     *
     * @return self
     */
    public function setProvisioningEnabled($provisioning_enabled)
    {
        $this->container['provisioning_enabled'] = $provisioning_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Hook
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  onelogin/sdk
 * @author   Onelogin Devex Team
 * @link     https://onelogin.com
 */

/**
 * OneLogin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0-alpha.1
 * Generated by: https://onelogin.com
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://onelogin.com).
 * https://onelogin.com
 * Do not edit the class manually.
 */

namespace onelogin/sdk\Model;

use \ArrayAccess;
use \onelogin/sdk\ObjectSerializer;

/**
 * Hook Class Doc Comment
 *
 * @category Class
 * @package  onelogin/sdk
 * @author   Onelogin Devex Team
 * @link     https://onelogin.com
 * @implements \ArrayAccess<string, mixed>
 */
class Hook implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'hook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'disabled' => 'bool',
        'timeout' => 'int',
        'env_vars' => 'string[]',
        'runtime' => 'string',
        'retries' => 'int',
        'packages' => 'object',
        'function' => 'string',
        'context_version' => 'string',
        'status' => 'string',
        'options' => '\onelogin/sdk\Model\HookOptions',
        'conditions' => '\onelogin/sdk\Model\HookConditionsInner[]',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'disabled' => null,
        'timeout' => null,
        'env_vars' => null,
        'runtime' => null,
        'retries' => null,
        'packages' => null,
        'function' => null,
        'context_version' => null,
        'status' => null,
        'options' => null,
        'conditions' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'disabled' => 'disabled',
        'timeout' => 'timeout',
        'env_vars' => 'env_vars',
        'runtime' => 'runtime',
        'retries' => 'retries',
        'packages' => 'packages',
        'function' => 'function',
        'context_version' => 'context_version',
        'status' => 'status',
        'options' => 'options',
        'conditions' => 'conditions',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'disabled' => 'setDisabled',
        'timeout' => 'setTimeout',
        'env_vars' => 'setEnvVars',
        'runtime' => 'setRuntime',
        'retries' => 'setRetries',
        'packages' => 'setPackages',
        'function' => 'setFunction',
        'context_version' => 'setContextVersion',
        'status' => 'setStatus',
        'options' => 'setOptions',
        'conditions' => 'setConditions',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'disabled' => 'getDisabled',
        'timeout' => 'getTimeout',
        'env_vars' => 'getEnvVars',
        'runtime' => 'getRuntime',
        'retries' => 'getRetries',
        'packages' => 'getPackages',
        'function' => 'getFunction',
        'context_version' => 'getContextVersion',
        'status' => 'getStatus',
        'options' => 'getOptions',
        'conditions' => 'getConditions',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_READY = 'ready';
    public const STATUS_CREATE_QUEUED = 'create-queued';
    public const STATUS_CREATE_RUNNING = 'create-running';
    public const STATUS_CREATE_FAILED = 'create-failed';
    public const STATUS_UPDATE_QUEUED = 'update-queued';
    public const STATUS_UPDATE_RUNNING = 'update-running';
    public const STATUS_UPDATE_FAILED = 'update-failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_READY,
            self::STATUS_CREATE_QUEUED,
            self::STATUS_CREATE_RUNNING,
            self::STATUS_CREATE_FAILED,
            self::STATUS_UPDATE_QUEUED,
            self::STATUS_UPDATE_RUNNING,
            self::STATUS_UPDATE_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['disabled'] = $data['disabled'] ?? true;
        $this->container['timeout'] = $data['timeout'] ?? 1;
        $this->container['env_vars'] = $data['env_vars'] ?? null;
        $this->container['runtime'] = $data['runtime'] ?? null;
        $this->container['retries'] = $data['retries'] ?? 0;
        $this->container['packages'] = $data['packages'] ?? null;
        $this->container['function'] = $data['function'] ?? null;
        $this->container['context_version'] = $data['context_version'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['conditions'] = $data['conditions'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['disabled'] === null) {
            $invalidProperties[] = "'disabled' can't be null";
        }
        if ($this->container['timeout'] === null) {
            $invalidProperties[] = "'timeout' can't be null";
        }
        if ($this->container['env_vars'] === null) {
            $invalidProperties[] = "'env_vars' can't be null";
        }
        if ($this->container['runtime'] === null) {
            $invalidProperties[] = "'runtime' can't be null";
        }
        if ($this->container['retries'] === null) {
            $invalidProperties[] = "'retries' can't be null";
        }
        if (($this->container['retries'] > 4)) {
            $invalidProperties[] = "invalid value for 'retries', must be smaller than or equal to 4.";
        }

        if ($this->container['packages'] === null) {
            $invalidProperties[] = "'packages' can't be null";
        }
        if ($this->container['function'] === null) {
            $invalidProperties[] = "'function' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The Hook unique ID in OneLogin.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type A string describing the type of hook. e.g. `pre-authentication`
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled Boolean to enable or disable the hook. Disabled hooks will not run.
     *
     * @return self
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int $timeout The number of seconds to allow the hook function to run before before timing out. Maximum timeout varies based on the type of hook.
     *
     * @return self
     */
    public function setTimeout($timeout)
    {
        $this->container['timeout'] = $timeout;

        return $this;
    }

    /**
     * Gets env_vars
     *
     * @return string[]
     */
    public function getEnvVars()
    {
        return $this->container['env_vars'];
    }

    /**
     * Sets env_vars
     *
     * @param string[] $env_vars Environment Variable objects that will be available via process.env.ENV_VAR_NAME in the hook code.
     *
     * @return self
     */
    public function setEnvVars($env_vars)
    {
        $this->container['env_vars'] = $env_vars;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return string
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param string $runtime The Smart Hooks supported Node.js version to execute this hook with.
     *
     * @return self
     */
    public function setRuntime($runtime)
    {
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets retries
     *
     * @return int
     */
    public function getRetries()
    {
        return $this->container['retries'];
    }

    /**
     * Sets retries
     *
     * @param int $retries Number of retries if execution fails.
     *
     * @return self
     */
    public function setRetries($retries)
    {

        if (($retries > 4)) {
            throw new \InvalidArgumentException('invalid value for $retries when calling Hook., must be smaller than or equal to 4.');
        }

        $this->container['retries'] = $retries;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return object
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param object $packages An object containing NPM packages that are bundled with the hook function.
     *
     * @return self
     */
    public function setPackages($packages)
    {
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets function
     *
     * @return string
     */
    public function getFunction()
    {
        return $this->container['function'];
    }

    /**
     * Sets function
     *
     * @param string $function A base64 encoded string containing the javascript function code.
     *
     * @return self
     */
    public function setFunction($function)
    {
        $this->container['function'] = $function;

        return $this;
    }

    /**
     * Gets context_version
     *
     * @return string|null
     */
    public function getContextVersion()
    {
        return $this->container['context_version'];
    }

    /**
     * Sets context_version
     *
     * @param string|null $context_version The semantic version of the content that will be injected into this hook.
     *
     * @return self
     */
    public function setContextVersion($context_version)
    {
        $this->container['context_version'] = $context_version;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status String describing the state of the hook function. When a hook is ready and disabled is false it will be executed.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \onelogin/sdk\Model\HookOptions|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \onelogin/sdk\Model\HookOptions|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \onelogin/sdk\Model\HookConditionsInner[]|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \onelogin/sdk\Model\HookConditionsInner[]|null $conditions An array of objects that let you limit the execution of a hook to users in specific roles.
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at ISO8601 format date that they hook function was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at ISO8601 format date that they hook function was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



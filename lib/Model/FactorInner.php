<?php
/**
 * FactorInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  onelogin/sdk
 * @author   Onelogin Devex Team
 * @link     https://onelogin.com
 */

/**
 * OneLogin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0-alpha.1
 * Generated by: https://onelogin.com
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://onelogin.com).
 * https://onelogin.com
 * Do not edit the class manually.
 */

namespace onelogin/sdk\Model;

use \ArrayAccess;
use \onelogin/sdk\ObjectSerializer;

/**
 * FactorInner Class Doc Comment
 *
 * @category Class
 * @package  onelogin/sdk
 * @author   Onelogin Devex Team
 * @link     https://onelogin.com
 * @implements \ArrayAccess<string, mixed>
 */
class FactorInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'factor_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'status' => 'string',
        'default' => 'bool',
        'auth_factor_name' => 'string',
        'type_display_name' => 'string',
        'user_display_name' => 'string',
        'expires_at' => 'string',
        'factor_data' => '\onelogin/sdk\Model\FactorInnerFactorData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'default' => null,
        'auth_factor_name' => null,
        'type_display_name' => null,
        'user_display_name' => null,
        'expires_at' => null,
        'factor_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'default' => 'default',
        'auth_factor_name' => 'auth_factor_name',
        'type_display_name' => 'type_display_name',
        'user_display_name' => 'user_display_name',
        'expires_at' => 'expires_at',
        'factor_data' => 'factor_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'default' => 'setDefault',
        'auth_factor_name' => 'setAuthFactorName',
        'type_display_name' => 'setTypeDisplayName',
        'user_display_name' => 'setUserDisplayName',
        'expires_at' => 'setExpiresAt',
        'factor_data' => 'setFactorData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'default' => 'getDefault',
        'auth_factor_name' => 'getAuthFactorName',
        'type_display_name' => 'getTypeDisplayName',
        'user_display_name' => 'getUserDisplayName',
        'expires_at' => 'getExpiresAt',
        'factor_data' => 'getFactorData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_PENDING = 'pending';
    public const STATUS_ACCEPTED = 'accepted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_ACCEPTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['default'] = $data['default'] ?? null;
        $this->container['auth_factor_name'] = $data['auth_factor_name'] ?? null;
        $this->container['type_display_name'] = $data['type_display_name'] ?? null;
        $this->container['user_display_name'] = $data['user_display_name'] ?? null;
        $this->container['expires_at'] = $data['expires_at'] ?? null;
        $this->container['factor_data'] = $data['factor_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id MFA device identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status accepted : factor has been verified. pending: registered but has not been verified.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool|null
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool|null $default True = is user's default MFA device for OneLogin.
     *
     * @return self
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets auth_factor_name
     *
     * @return string|null
     */
    public function getAuthFactorName()
    {
        return $this->container['auth_factor_name'];
    }

    /**
     * Sets auth_factor_name
     *
     * @param string|null $auth_factor_name \"Official\" authentication factor name, as it appears to administrators in OneLogin.
     *
     * @return self
     */
    public function setAuthFactorName($auth_factor_name)
    {
        $this->container['auth_factor_name'] = $auth_factor_name;

        return $this;
    }

    /**
     * Gets type_display_name
     *
     * @return string|null
     */
    public function getTypeDisplayName()
    {
        return $this->container['type_display_name'];
    }

    /**
     * Sets type_display_name
     *
     * @param string|null $type_display_name Authentication factor display name as it appears to users upon initial registration, as defined by admins at Settings > Authentication Factors.
     *
     * @return self
     */
    public function setTypeDisplayName($type_display_name)
    {
        $this->container['type_display_name'] = $type_display_name;

        return $this;
    }

    /**
     * Gets user_display_name
     *
     * @return string|null
     */
    public function getUserDisplayName()
    {
        return $this->container['user_display_name'];
    }

    /**
     * Sets user_display_name
     *
     * @param string|null $user_display_name Authentication factor display name assigned by users when they enroll the device.
     *
     * @return self
     */
    public function setUserDisplayName($user_display_name)
    {
        $this->container['user_display_name'] = $user_display_name;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string|null $expires_at A short lived token that is required to Verify the Factor. This token expires based on the expires_in parameter passed in.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets factor_data
     *
     * @return \onelogin/sdk\Model\FactorInnerFactorData|null
     */
    public function getFactorData()
    {
        return $this->container['factor_data'];
    }

    /**
     * Sets factor_data
     *
     * @param \onelogin/sdk\Model\FactorInnerFactorData|null $factor_data factor_data
     *
     * @return self
     */
    public function setFactorData($factor_data)
    {
        $this->container['factor_data'] = $factor_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


